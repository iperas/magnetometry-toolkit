// ***********************************************************************
// <author>Stephan Burguchev</author>
// <copyright company="Stephan Burguchev">
//   Copyright (c) Stephan Burguchev 2012-2015. All rights reserved.
// </copyright>
// <summary>
//   EbDeviceManager.h
// </summary>
// ***********************************************************************
#pragma once

#include "common/SmartPtr.h"
#include <QtCore>
#include "SerialPortBinaryStream.h"

namespace core
{
    class EbDeviceManager
    {
    public:
        SMART_PTR_T(EbDeviceManager);

        void connect();

        // По этой команде возвращается информация в текстовом виде о подключенном оборудовании (POS-1) длиной до 40 символов.
        void sendEnq();

        // По этой команде датчик повторно передаёт ответ на предыдущую команду.
        // Возможно использование этой команды для восстановления информации в случае ошибок при приёме или передаче блоков данных.
        void sendNak();

        // По этой команде возвращается краткая информация о производителе датчика в текстовой форме длиной до 256 символов. 
        void sendAbout();

        // Включает или отключает режим пониженного энергопотребления прибора. Ответом на выполнение является строка 'set standby on', 
        // либо 'set standby off' в зависимости от команды. Следствием включения режима пониженного энергопотребления является отключение 
        // линии TxD от источника питания –12 В на время отсутствия передачи данных от датчика к внешнему устройству. 
        // При использовании длинного соединительного кабеля между датчиком и внешним устройством и/или при наличии частых ошибок 
        // в приёме данных не рекомендуется включать режим пониженного энергопотребления. Значение по умолчанию – выключено.
        void sendStandBy(bool enabled);

        // Применяется для определения текущего режима обмена данными. Ответом на команду является строка 'mode is text' или 'mode is binary' 
        // в зависимости от установленного режима обмена данными между датчиком и внешним устройством.
        void sendGetMode();

        enum Mode
        {
            Text,
            Binary
        };

        // Устанавливает текстовый или двоичный режим обмена данными между датчиком и внешним устройством. 
        // Ответом на команду является строка 'set text mode' или 'set binary mode', соответственно. Режим обмена по умолчанию – двоичный режим.
        // Формат приводимых далее команд и ответов на их исполнение зависит от установленного режима обмена данными между датчиком и внешним устройством.
        void sendSetMode(Mode mode);

        // Применяется для определения времени встроенных часов датчика. 
        // Ответ на эту команду содержит информацию о состоянии встроенных часов датчика и зависит от режима обмена данными
        // see more in manual
        void sendGetTime();

        // В текстовом режиме: установка только времени, в бинарном: времени и даты
        // see more in manual
        void sendSetTime(QDateTime dateTime);

        // Применяется для определения даты встроенных часов датчика. 
        // Ответом является строка символов в формате 'mm-dd-yy', где mm – месяц, dd – день месяца, yy – год. 
        // Команда поддерживается только в текстовом режиме, так как в двоичном режиме установку и получение даты реализует команда time. 
        // see more in manual
        void sendGetDate();

        // Только в текстовом режиме
        // see more in manual
        void sendSetDate(QDateTime dateTime);

        // Возвращает текущее значение границ рабочего поддиапазона датчика в нTл.
        // Значение по умолчанию соответствует рабочему поддиапазону с центральным полем равным 55000 нTл. 
        // see more in manual
        void sendGetRange();

        // Здесь CENTER – число равное требуемому значению центрального поля рабочего поддиапазона в нTл, 
        // Center – длинное целое (4 байта, старший байт первый) равное требуемому значению центрального поля рабочего поддиапазона в нTл. 
        // Устанавливает текущий рабочий поддиапазон измерения магнитного поля по значению параметра, 
        // соответствующего требуемому значению центрального поля рабочего поддиапазона в нTл. 
        // see more in manual
        void sendSetRange(int center);

        // Запускает измерение модуля магнитной индукции. Время исполнения команды – 4000 мс. Ответ зависит от установленного режима обмена данными. 
        void sendRun();

        // Здесь PRM – целое число, определяющее цикличность автоматического запуска последующих измерений в секундах. 
        // Допустимые значения: 1  86400, Prm - длинное целое (4 байта, старший байт первый). 
        // Если Prm > 0, то его значение определяет цикличность автоматического запуска измерения в секундах, 
        // если Prm < 0 то его абсолютное значение определяет частоту последующих измерений в Гц. 
        // Допустимые значения Prm в данной модели датчика: –5  –1 и 1  86400.
        void sendAuto();
    private:
        SerialPortBinaryStream::UniquePtr_t _serialPort;

        void sendCommand(QByteArray command);
    };
}
